import cv2
import os
import datetime
import uuid
import serial
import time

# 시리얼 포트 연결
ser = serial.Serial('COM3', 9600)  # 포트 번호와 보레이트에 맞게 수정해주세요.

# 웹캠 캡처를 위한 VideoCapture 객체 생성
cap = cv2.VideoCapture(0)  # 0은 기본 웹캠을 의미합니다. 다른 번호를 사용하여 다른 카메라를 선택할 수도 있습니다.

# 저장할 경로 설정
save_path = r'C:\\Users\\JDY\\Desktop\\vs\\'  # 경로 뒤에 '\\'를 추가하여 디렉토리 경로임을 명시합니다.

# 사진 찍은 횟수를 카운트하는 변수
photo_count = 0

last_detection_time = 0

while True:
    # 웹캠 프레임 읽기
    ret, frame = cap.read()

    # 프레임 출력
    cv2.imshow('Webcam', frame)

    # 시리얼 데이터 수신
    data = ser.readline().strip().decode()

    # 시리얼 데이터가 1인 경우
    if data == '1':
        # 사진 찍기
        if photo_count == 0:
            # 유니크한 파일 이름 생성
            unique_filename = str(uuid.uuid4().hex)

            # 현재 시간을 이용하여 파일 이름에 유니크한 식별자 추가
            current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            file_name = f"captured_image_{current_time}_{unique_filename}.jpg"

            # 이미지 파일 경로 및 이름 설정
            file_path = os.path.join(save_path, file_name)
            delay(500)
            # 이미지 파일로 저장
            cv2.imwrite(file_path, frame)
            print(f"{file_path} 이미지가 저장되었습니다.")
  # 번호판 영역 추출
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            gray = cv2.GaussianBlur(gray, (5, 5), 0)
            edged = cv2.Canny(gray, 50, 150)
            contours, _ = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
            contours = sorted(contours, key=cv2.contourArea, reverse=True)[:5]

            for contour in contours:
                peri = cv2.arcLength(contour, True)
                approx = cv2.approxPolyDP(contour, 0.02 * peri, True)

                if len(approx) == 4:
                    x, y, w, h = cv2.boundingRect(approx)
                    plate_img = frame[y:y + h, x:x + w]

                    # 번호판 이미지 저장
                    plate_file_name = f"plate_{current_time}_{unique_filename}.jpg"
                    plate_file_path = os.path.join(save_path, plate_file_name)
                    cv2.imwrite(plate_file_path, plate_img)
                    print(f"{plate_file_path} 번호판 이미지가 저장되었습니다.")

                    # 번호판 인식 (테서랙트 사용)
                    plate_text = pytesseract.image_to_string(plate_img, config='--psm 7')
                    print(f"인식된 번호판 텍스트: {plate_text}")

                    # 번호판 텍스트를 이미지 위에 표시
                    cv2.putText(frame, plate_text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                    cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

                    break  # 첫 번째로 인식된 번호판만 처리
            # 사진 찍은 횟수 증가
            photo_count += 1

        # 마지막으로 물체를 인식한 시간 기록
        last_detection_time = time.time()

    # 시리얼 데이터가 1이 아닌 경우
    else:
        # 5초간 물체가 인식되지 않으면 초기화
        if time.time() - last_detection_time > 5:
            photo_count = 0

    # 'q' 키를 누르면 종료
    if cv2.waitKey(1) & 0xFF == ord('q'):
        breakg

# 사용이 끝나면 객체 해제git config --global --add safe.directory C:/Users/User

cap.release()
cv2.destroyAllWindows()
ser.close()
